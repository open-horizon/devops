#!/bin/bash

# Test the current all-in-1 management hub and agent

usage() {
    exitCode=${1:-0}
    cat << EndOfMessage
Usage: ${0##*/} [-c <config-file>] [-h] [-v]

Test the current all-in-1 management hub and agent.

Preconditions for running this test script:
- Currently only supported on ubuntu
- You must pass in the same variable customizations that you did to deploy-mgmt-hub.sh, and the passwords and tokens that were automatically generated by deploy-mgmt-hub.sh. The variables can be passed to test-mgmt-hub.sh either by exporting them in the environment, or by setting them in a config file and passing it to this script using the -c flag.

Flags:
  -c <config-file>   A config file with lines in the form variable=value that set any of the environment variables supported by this script. Takes precedence over the same variables passed in through the environment.
  -v    Verbose output.
  -h    Show this usage.

Required Environment Variables:
  EXCHANGE_ROOT_PW, EXCHANGE_HUB_ADMIN_PW, EXCHANGE_SYSTEM_ADMIN_PW, AGBOT_TOKEN, EXCHANGE_USER_ADMIN_PW, HZN_DEVICE_TOKEN
EndOfMessage
    exit $exitCode
}

# Parse cmd line
while getopts ":c:vh" opt; do
	case $opt in
		c)  CONFIG_FILE="$OPTARG"
		    ;;
		v)  VERBOSE=1
		    ;;
		h)  usage
		    ;;
		\?) echo "Error: invalid option: -$OPTARG"; usage 1
		    ;;
		:)  echo "Error: option -$OPTARG requires an argument"; usage 1
		    ;;
	esac
done
if [[ $# -ne 0 ]]; then shift $#; fi   # shunit2 that is run below won't understand these args
#echo "Number of args: $#, args: $*"

# Read config file, if specified. This will override any corresponding variables from the environment.
# After this, the default values of env vars not set will be set below.
if [[ -n $CONFIG_FILE ]]; then
    if [[ ! -f $CONFIG_FILE ]]; then
        echo "$CONFIG_FILE does not exist"; exit 1
    fi
    echo "Reading configuration file $CONFIG_FILE ..."
    set -a   # export all variable assignments until further notice
    source "$CONFIG_FILE"
    if [[ $? -ne 0 ]]; then echo "there are errors in $CONFIG_FILE"; exit 1; fi   # source seems to return 0 even when there is an error in the file
    set +a   # undoes the automatic exporting
fi

: ${EXCHANGE_HUB_ADMIN_PW:?} ${EXCHANGE_SYSTEM_ADMIN_PW:?} ${EXCHANGE_USER_ADMIN_PW:?}   # required

# Default environment variables that can be overridden.
export EXCHANGE_SYSTEM_ORG=${EXCHANGE_SYSTEM_ORG:-IBM}
export EXCHANGE_USER_ORG=${EXCHANGE_USER_ORG:-myorg}
export AGBOT_ID=${AGBOT_ID:-agbot}   # its agbot id in the exchange

# Global variables for this script (not intended to be overridden)
TMP_DIR=/tmp/horizon-all-in-1
mkdir -p $TMP_DIR
CURL_OUTPUT_FILE=$TMP_DIR/curlExchangeOutput
CURL_ERROR_FILE=$TMP_DIR/curlExchangeErrors
SEMVER_REGEX='^[0-9]+\.[0-9]+(\.[0-9]+)+'   # matches a version like 1.2.3 (must be at least 3 fields). Also allows a bld num on the end like: 1.2.3-RC1

#====================== Geneeral Functions ======================

# Only echo this if VERBOSE is 1 or true
verbose() {
    if [[ "$VERBOSE" == '1' || "$VERBOSE" == 'true' ]]; then
        echo 'verbose:' $*
    fi
}

# Check the exit code passed in and exit if non-zero
chk() {
    local exitCode=${1:?}
    local task=${2:?}
    local dontExit=$3   # set to 'continue' to not exit for this error
    if [[ $exitCode == 0 ]]; then return; fi
    echo "Error: exit code $exitCode from: $task"
    if [[ $dontExit != 'continue' ]]; then
        exit $exitCode
    fi
}

# Check both the exit code and http code passed in and exit if non-zero
chkHttp() {
    local exitCode=${1:?}
    local httpCode=${2:?}
    local goodHttpCodes=${3:?}   # space or comma separated list of acceptable http codes
    local task=${4:?}
    local errorFile=$5   # optional: the file that has the curl error in it
    local outputFile=$6   # optional: the file that has the curl output in it (which sometimes has the error in it)
    local dontExit=$7   # optional: set to 'continue' to not exit for this error
    if [[ -n $errorFile && -f $errorFile && $(wc -c $errorFile | awk '{print $1}') -gt 0 ]]; then
        task="$task, stderr: $(cat $errorFile)"
    fi
    chk $exitCode $task
    if [[ -n $httpCode && $goodHttpCodes == *$httpCode* ]]; then return; fi
    # the httpCode was bad, normally in this case the api error msg is in the outputFile
    if [[ -n $outputFile && -f $outputFile && $(wc -c $outputFile | awk '{print $1}') -gt 0 ]]; then
        task="$task, stdout: $(cat $outputFile)"
    fi
    echo "Error: http code $httpCode from: $task"
    if [[ $dontExit != 'continue' ]]; then
        if [[ ! "$httpCode" =~ ^[0-9]+$ ]]; then
            httpCode=5   # some times httpCode is the curl error msg
        fi
        exit $httpCode
    fi
}

isWordInString() {   # returns true (0) if the specified word is in the space-separated string
    local word=${1:?} string=$2
    if [[ $string =~ (^|[[:space:]])$word($|[[:space:]]) ]]; then
        return 0
    else
        return 1
    fi
}

# Download a file via a URL
getUrlFile() {
    local url=${1:?}
    local localFile=${2:?}
    if isWordInString "${url##*/}" "$OH_DONT_DOWNLOAD"; then
        echo "Skipping download of $url"
        return
    fi
    verbose "Downloading $url ..."
    if [[ $url == *@* ]]; then
        # special case for development:
        scp $url $localFile
        chk $? "scp'ing $url"
    else
        local httpCode=$(curl -sS -w "%{http_code}" -L -o $localFile $url 2>$CURL_ERROR_FILE)
        chkHttp $? $httpCode 200 "downloading $url" $CURL_ERROR_FILE $localFile
    fi
}

assertStartsWith() {
    assertNotEquals "$1" "${1#$2}"
}

assertEndsWith() {
    assertNotEquals "$1" "${1%$2}"
}

#====================== Test Functions ======================

testMgmtHubServices() {
    assertTrue "docker ps --filter 'name=mongo' --format '{{ .Status }}' | grep -q '(healthy)' "
    assertTrue "docker ps --filter 'name=postgres' --format '{{ .Status }}' | grep -q '(healthy)' "
    assertTrue "docker ps --filter 'name=exchange-api' --format '{{ .Status }}' | grep -q '(healthy)' "
    assertTrue "docker ps --filter 'name=agbot' --format '{{ .Status }}' | grep -q '(healthy)' "
    assertTrue "docker ps --filter 'name=css-api' --format '{{ .Status }}' | grep -q '(healthy)' "
    assertTrue "docker ps --filter 'name=fdo-owner-services' --format '{{ .Status }}' | grep -q '(healthy)' "
}

testDefaultsFile() {
    assertTrue "grep -q -E '^HZN_EXCHANGE_URL=http' /etc/default/horizon"
    assertTrue "grep -q -E '^HZN_FSS_CSSURL=http' /etc/default/horizon"
    assertTrue "grep -q -E '^HZN_AGBOT_URL=http' /etc/default/horizon"
    assertTrue "grep -q -E '^HZN_FDO_SVC_URL=http' /etc/default/horizon"
    assertTrue "grep -q -E '^HZN_DEVICE_ID=.+' /etc/default/horizon"
    if grep -q -E '^HZN_FSS_CSSURL=https:' /etc/default/horizon; then
        assertTrue "grep -q -E '^HZN_MGMT_HUB_CERT_PATH=.+' /etc/default/horizon"
    fi
}

testAgent() {
    assertTrue "systemctl status horizon | grep -q -E '^ *Active: active \(running\)'"

    local nodeList=$(hzn node list 2>&1)
    local exchVersion=$(jq -r .configuration.exchange_version <<< $nodeList)
    assertTrue "[[ $exchVersion =~ $SEMVER_REGEX ]]"
    assertEquals 'configured' "$(jq -r .configstate.state <<< $nodeList)"
}

testEdgeService() {
    assertEquals 'helloworld' "$(hzn policy list | jq -r '.properties[] | select(.name=="openhorizon.example") | .value')"
    assertNotEquals '[]' "$(hzn agreement list)"

    # this isn't done in a re-registration: assertTrue "hzn eventlog list | grep -q 'Complete policy advertising with the Exchange for service $EXCHANGE_SYSTEM_ORG/ibm.helloworld' "
    assertTrue "hzn eventlog list | grep -q -E 'Node received Proposal message using agreement \S+ for service $EXCHANGE_SYSTEM_ORG/ibm.helloworld' "
    assertTrue "hzn eventlog list | grep -q 'Agreement reached for service ibm.helloworld' "
    assertTrue "hzn eventlog list | grep -q 'Image loaded for $EXCHANGE_SYSTEM_ORG/ibm.helloworld' "
    assertTrue "hzn eventlog list | grep -q 'Workload service containers for $EXCHANGE_SYSTEM_ORG/ibm.helloworld are up and running' "

    assertTrue "docker ps --format '{{ .Names }}' | grep -q -E '\-ibm.helloworld$' "

    #assertTrue "hzn service log ibm.helloworld | grep -q 'says: Hello ' "   #todo: restore this test when https://github.com/open-horizon/anax/issues/2626 is fixed
}

testExchangeHubAdmin() {   # test some of the hzn cmds that a hub admin can run
    export HZN_ORG_ID=root
    export HZN_EXCHANGE_USER_AUTH=hubadmin:$EXCHANGE_HUB_ADMIN_PW

    # Verfiy the hub admin can list the orgs, and that all of the default orgs exist
    assertTrue "hzn exchange org list | grep -q 'root' "
    assertTrue "hzn exchange org list | grep -q '$EXCHANGE_SYSTEM_ORG' "
    assertTrue "hzn exchange org list | grep -q '$EXCHANGE_USER_ORG' "

    # Create an org, verify it, and configure the agbot to serve example services in this org
    hzn exchange org remove -f -a $EXCHANGE_SYSTEM_ORG/$AGBOT_ID test-mgmt-hub-org >/dev/null 2>/dev/null   # in case a previous run stopped midway
    assertTrue "hzn exchange org create -d 'test-mgmt-hub org' -a $EXCHANGE_SYSTEM_ORG/$AGBOT_ID test-mgmt-hub-org"
    assertTrue "hzn exchange org list | grep -q 'test-mgmt-hub-org' "
    assertTrue "hzn exchange agbot addpattern $EXCHANGE_SYSTEM_ORG/$AGBOT_ID $EXCHANGE_SYSTEM_ORG '*' test-mgmt-hub-org"
    assertEquals 'test-mgmt-hub-org' "$(hzn exchange agbot listdeploymentpol $EXCHANGE_SYSTEM_ORG/$AGBOT_ID | jq -r '."test-mgmt-hub-org_*_test-mgmt-hub-org".businessPolOrgid')"
    assertEquals 'test-mgmt-hub-org' "$(hzn exchange agbot listpattern $EXCHANGE_SYSTEM_ORG/$AGBOT_ID | jq -r '."test-mgmt-hub-org_*_test-mgmt-hub-org".patternOrgid')"
    assertEquals "$EXCHANGE_SYSTEM_ORG" "$(hzn exchange agbot listpattern $EXCHANGE_SYSTEM_ORG/$AGBOT_ID | jq -r '."'$EXCHANGE_SYSTEM_ORG'_*_test-mgmt-hub-org".patternOrgid')"

    # Clean up and verify
    assertTrue "hzn exchange agbot removepattern $EXCHANGE_SYSTEM_ORG/$AGBOT_ID $EXCHANGE_SYSTEM_ORG '*' test-mgmt-hub-org"
    assertTrue "hzn exchange org remove -f -a $EXCHANGE_SYSTEM_ORG/$AGBOT_ID test-mgmt-hub-org"
    assertFalse "hzn exchange org list | grep -q 'test-mgmt-hub-org' "
    assertFalse "hzn exchange agbot listdeploymentpol | grep -q 'test-mgmt-hub-org' "
    assertFalse "hzn exchange agbot listpattern | grep -q 'test-mgmt-hub-org' "
}

testExchangeSystemOrg() {   # test some of the hzn cmds that run in the system org
    export HZN_ORG_ID=$EXCHANGE_SYSTEM_ORG
    export HZN_EXCHANGE_USER_AUTH=admin:$EXCHANGE_SYSTEM_ADMIN_PW
    assertEquals 'true' "$(hzn exchange user list | jq -r '."'$HZN_ORG_ID'/admin".admin')"
    assertNotNull "$(hzn exchange agbot list $AGBOT_ID | jq -r '."'$HZN_ORG_ID'/'$AGBOT_ID'".publicKey')"
    assertEquals "$EXCHANGE_USER_ORG" "$(hzn exchange agbot listdeploymentpol $AGBOT_ID | jq -r '."'$EXCHANGE_USER_ORG'_*_'$EXCHANGE_USER_ORG'".businessPolOrgid')"
    assertEquals "$EXCHANGE_USER_ORG" "$(hzn exchange agbot listpattern $AGBOT_ID | jq -r '."'$EXCHANGE_USER_ORG'_*_'$EXCHANGE_USER_ORG'".patternOrgid')"
    assertEquals "$HZN_ORG_ID" "$(hzn exchange agbot listpattern $AGBOT_ID | jq -r '."'$HZN_ORG_ID'_*_'$EXCHANGE_USER_ORG'".patternOrgid')"
}

testExchangeUserOrg() {   # test some of the hzn cmds that run in the user org
    export HZN_ORG_ID=$EXCHANGE_USER_ORG
    export HZN_EXCHANGE_USER_AUTH=admin:$EXCHANGE_USER_ADMIN_PW
    assertTrue "hzn exchange service list $EXCHANGE_SYSTEM_ORG/ | grep -q '$EXCHANGE_SYSTEM_ORG/ibm.helloworld_1.0.0_amd64' "
    assertTrue "hzn exchange pattern list $EXCHANGE_SYSTEM_ORG/ | grep -q '$EXCHANGE_SYSTEM_ORG/pattern-ibm.helloworld' "
    assertTrue "hzn exchange deployment listpolicy | grep -q '$HZN_ORG_ID/policy-ibm.helloworld_1.0.0' "
    local deployCheck=$(hzn deploycheck all -b policy-ibm.helloworld_1.0.0 2>&1 | grep -v 'Neither node id nor node')
    assertEquals 'true' "$(jq -r .compatible <<< $deployCheck)"
    assertEquals 'Compatible' "$(jq -r '.reason."'$EXCHANGE_SYSTEM_ORG'/ibm.helloworld_1.0.0_amd64"' <<< $deployCheck)"
    local nodeId=$(hzn node list 2>&1 | jq -r .id)
    assertEquals 'device' "$(hzn exchange node list $nodeId | jq -r '."'$HZN_ORG_ID'/'$nodeId'".nodeType')"
    assertEquals 'true' "$(hzn exchange user list | jq -r '."'$HZN_ORG_ID'/admin".admin')"
}

testMms() {
    export HZN_ORG_ID=$EXCHANGE_USER_ORG
    export HZN_EXCHANGE_USER_AUTH=admin:$EXCHANGE_USER_ADMIN_PW

    # List 1 of the files deploy-mgmt-hub.sh put in the system org
    assertEquals 'ready' "$(hzn mms -o $EXCHANGE_SYSTEM_ORG -u "$HZN_ORG_ID/$HZN_EXCHANGE_USER_AUTH" object list -d -t agent_files | grep -v 'Listing objects in org' | jq -r '.[] | select(.objectID=="agent-install.cfg") | .objectStatus ')"

    # Write a file to MMS
    TMP_MMS_DIR=$TMP_DIR/test-mgmt-hub-mms-mms
    mkdir -p $TMP_MMS_DIR
    cat << EOF > $TMP_MMS_DIR/test-mgmt-hub-mms-meta.json
{
"objectID": "test-mgmt-hub-mms-file",
"objectType": "test-mgmt-hub",
"destinationOrgID": "$HZN_ORG_ID",
"destinationType": "pattern-ibm.helloworld"
}
EOF
    echo -e "foo\nbar" > $TMP_MMS_DIR/test-mgmt-hub-mms-file
    assertTrue "hzn mms object publish -m $TMP_MMS_DIR/test-mgmt-hub-mms-meta.json -f $TMP_MMS_DIR/test-mgmt-hub-mms-file"
    assertEquals 'ready' "$(hzn mms object list -d -t test-mgmt-hub | grep -v 'Listing objects in org' | jq -r '.[] | select(.objectID=="test-mgmt-hub-mms-file") | .objectStatus ')"

    # Download the file from MMS and compare it to the original
    assertTrue "hzn mms object download -t test-mgmt-hub -i test-mgmt-hub-mms-file -f $TMP_MMS_DIR/test-mgmt-hub-mms-file.downloaded -O"
    assertTrue "diff $TMP_MMS_DIR/test-mgmt-hub-mms-file $TMP_MMS_DIR/test-mgmt-hub-mms-file.downloaded"

    # Clean up
    rm -rf $TMP_MMS_DIR
}

#====================== Main ======================

if [[ ! -f shunit2 ]]; then   # hasn't changed in 14 months, so don't need to download it every time
    getUrlFile https://raw.githubusercontent.com/kward/shunit2/master/shunit2 shunit2
    #chmod +x shunit2   # we are sourcing it, so it doesn't need to be executable
fi

. ./shunit2   # run every function that starts with 'test'
